-- Migration: Add RLS (Row Level Security) policies for user tables
-- Generated by Drizzle migration system
-- This enables direct frontend access to Supabase with security guarantees
-- Execute via: pnpm db:push

-- ==========================================
-- Enable RLS on user_profiles table
-- ==========================================
ALTER TABLE "user_profiles" ENABLE ROW LEVEL SECURITY;

-- Users can view own profile
CREATE POLICY "Users can view own profile" ON "user_profiles" 
  FOR SELECT USING (auth.uid() = id);

-- Users can update own profile  
CREATE POLICY "Users can update own profile" ON "user_profiles"
  FOR UPDATE USING (auth.uid() = id);

-- Users can insert own profile (for automatic profile creation)
CREATE POLICY "Users can insert own profile" ON "user_profiles"
  FOR INSERT WITH CHECK (auth.uid() = id);

-- ==========================================
-- Enable RLS on user_preferences table
-- ==========================================
ALTER TABLE "user_preferences" ENABLE ROW LEVEL SECURITY;

-- Users can view own preferences
CREATE POLICY "Users can view own preferences" ON "user_preferences"
  FOR SELECT USING (auth.uid() = user_id);

-- Users can insert own preferences
CREATE POLICY "Users can insert own preferences" ON "user_preferences"
  FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Users can update own preferences
CREATE POLICY "Users can update own preferences" ON "user_preferences"
  FOR UPDATE USING (auth.uid() = user_id);

-- ==========================================
-- Enable RLS on user_subscriptions table
-- ==========================================
ALTER TABLE "user_subscriptions" ENABLE ROW LEVEL SECURITY;

-- Users can view own subscription
CREATE POLICY "Users can view own subscription" ON "user_subscriptions"
  FOR SELECT USING (auth.uid() = user_id);

-- Users can insert own subscription (usually handled by server)
CREATE POLICY "Authenticated users can insert subscription" ON "user_subscriptions"
  FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Users can update own subscription (e.g., cancel subscription)
CREATE POLICY "Users can update own subscription" ON "user_subscriptions"
  FOR UPDATE USING (auth.uid() = user_id);

-- ==========================================
-- Performance optimization indexes
-- ==========================================

-- Index for user_preferences.user_id (if not exists)
CREATE INDEX IF NOT EXISTS "idx_user_preferences_user_id" ON "user_preferences"("user_id");

-- Index for user_subscriptions.user_id (if not exists)  
CREATE INDEX IF NOT EXISTS "idx_user_subscriptions_user_id" ON "user_subscriptions"("user_id");

-- ==========================================
-- Verification function (optional, can be removed after testing)
-- ==========================================
CREATE OR REPLACE FUNCTION verify_rls_policies()
RETURNS TABLE (
  table_name TEXT,
  rls_enabled BOOLEAN,
  policy_count BIGINT
) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    t.tablename::TEXT,
    t.rowsecurity as rls_enabled,
    COUNT(p.policyname) as policy_count
  FROM pg_tables t
  LEFT JOIN pg_policies p ON t.tablename = p.tablename
  WHERE t.schemaname = 'public' 
    AND t.tablename IN ('user_profiles', 'user_preferences', 'user_subscriptions')
  GROUP BY t.tablename, t.rowsecurity
  ORDER BY t.tablename;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;